* Details for URI//URL characteristics (only outline in the lecture -> details in supplementary materials)
* Content Negotiation
* Asynchronous operations in REST
* Implementing a REESTful service -> better as a tutoril for labs
* Evaluation of RESTful service -> use in parts somewhere?



=== Content Negotiation

            <div class="slide outline"></div>

            <section>
                <header>Content Negotiation</header>

                <div class="slide">
                    <hgroup>
                        <h1>Content Negotiation</h1>
                    </hgroup>
                    <ul>
                        <li>Advantages</li>
                        <ul>
                            <li>Different clients may want to use different formats</li>
                            <ul>
                                <li>Web browser: JSON</li>
                                <li>Java client: XML</li>
                                <li>Ruby client: YAML</li>
                            </ul>
                            <li>Clients want internationalized data<br/>
                                &rarr; translated information in various languages</li>
                            <li>applications evolve<br/>
                                &rarr; need for version support</li>
                        </ul>
                        <li>HTTP Content Negotiation</li>
                        <ul>
                            <li>a protocol, also called conneg</li>
                            <li>format, encoding, language</li>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Representation Negotiation</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>Client requests specific media types it supports</li>
                        <ul>
                            <li>client sets <code>Accept</code> header in the request</li>
                            <ul>
                                <li>the value is a comma delimited set of content types</li>
                            </ul>
                        </ul>
                        <li>Specific requests</li>
                        <ul>
                            <li>to ask for xml or json representations:</li>
                            <pre class="brush: plain; gutter: 'false'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept: application/xml, application/json
                            </pre>
                            <li>server choses one of the types (by applying preference ordering) and serializes the resource in that type</li>
                            <li>when the server cannot find any type, it sends <code>406 Not Acceptable</code> response code</li>
                        </ul>
                        <li>Generic requests</li>
                        <ul>
                            <li>client may specify wildcards to ask for any type or subtype</li>
                            <pre class="brush: plain; gutter: 'false'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept: text/*, text/html; level=1
                            </pre>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Preference Ordering &ndash; Implicit Rule</h1>
                    </hgroup>
                    <ul class="small">
                        <li>Implicit rule</li>
                        <ul>
                            <li>More specific media type takes preference over less specific ones. Example:</li>
                            <pre class="brush: plain; gutter: 'false'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept: text/*, text/html;level=1, */*, application/xml
                            </pre>
                            <li class="space-before">server interprets the client preference as:<br/>
                                1. <code>text/html;level=1</code> &ndash; most specific<br/>
                                2. <code>application/xml</code> &ndash; no parameters<br/>
                                3. <code>text/*</code> &ndash; more concrete than match-all<br/>
                                4. <code>*/*</code> &ndash; less specific<br/>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Preference Ordering &ndash; Explicit Rules</h1>
                    </hgroup>
                    <ul class="small">
                        <li>Explicit rules</li>
                        <ul>
                            <li>using <code>q</code> parameter (qualifier), numeric value from 0.0 to 1.0
                                (1.0 indicates the most preferred type)</li>
                            <pre class="brush: plain; gutter: 'false'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept: text/*;q=0.9, */*;q=0.1, application/json, application/xml;q=0.5
                            </pre>
                            <li class="space-before">server interprets the client preference as:<br/>
                                1. <code>application/json</code> &ndash; implicit qualifier 1.0, most specific<br/>
                                2. <code>text/*</code> &ndash; the second next highest qualifier 0.9<br/>
                                3. <code>application/xml</code> &ndash; more specific but lower pref. value 0.5<br/>
                                4. <code>*/*</code> &ndash; anything otherwise<br/>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Language and Encoding Negotiation</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>Language negotiation</li>
                        <ul>
                            <li>Client uses <code>Accept-Language</code> header; the value is a comma
                                separated list of language (ISO 639) and country codes (ISO 3166)</li>
                            <pre class="brush: plain; gutter: 'false'; class-name: 'tight'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept-Language: en-us, cs, fr

                            &lt; Content-Language: en-us
                            </pre>
                            <li>Supports preference qualifiers too</li>
                        </ul>
                        <li>Encoding negotiation</li>
                        <ul>
                            <li>Client uses <code>Accept-Encoding</code> for message compression<br/>
                                the value is a comma separated list of acceptable compressions</li>
                            <pre class="brush: plain; gutter: 'false'; class-name: 'tight'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept-Encoding: gzip, deflate

                            &lt; Content-Encoding: gzip
                            </pre>
                            <li>Supports preference qualifiers too</li>
                            <li>When a client or a server compress a message body the
                                <code>Content-Encoding</code> must always be specified!</li>
                        </ul>
                    </ul>
                </div>

                <div class="slide" id="resource-versions">
                    <hgroup>
                        <h1>Resource Version Negotiation</h1>
                    </hgroup>
                    <ul class="small">
                        <li>Applications and their resources evolve</li>
                        <ul>
                            <li>A service need to support old clients</li>
                            <li>The service's URI and methods do not need to change &ndash; the content it provides may be in different versions</li>
                            <li>cf. <a href="lecture2.html#/resource-versions">resource versions in Lecture 2</a>.
                        </ul>
                        <li>Encode the version information</li>
                        <pre class="brush: plain; gutter: 'false'">
                            &gt; GET /orders HTTP/1.1
                            &gt; Accept: application/xml; version=2.0

                            &lt; HTTP/1.1 200 OK
                            &lt; Content-Type: application/xml; version=2.0
                            </pre>
                    </ul>

                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Respecting Standards?</h1>
                    </hgroup>
                    <ul class="x-small spacing">
                        <!--<li>HTTP specification is very powerful</li>
                        <ul>
                            <li>but some clients ignore HTTP features</li>
                            <ul>
                                <li>such as Firefox hardcodes <code>Accept</code> header as<br/>
                                    <code>text/html,application/xhtml+xml,application/xml,*/*</code></li>
                                <li>hence it is impossible to to negotiate e.g. a JSON format</li>
                            </ul>
                            <li>Or if you want to test something quickly</li>
                            <ul>
                                <li>using <code>curl</code> is not as quick as entering URL to a browser</li>
                            </ul>
                        </ul>-->
                        <li>Negotiation by URI patterns</li>
                        <ul>
                            <li>quite common, for example:<br/>
                                <code>http://company.com/orders/?alt=json</code> (Google APIs)</li>
                            <li>or in the URI path component:<br/>
                                <code>http://company.com/orders.xml</code><br/>
                                <code>http://company.com/orders.xml.en-us</code><br/>
                                <code>http://company.com/orders.json</code></li>
                            <li>But be aware of the <a href="lecture2.html#/uri-opacity">URI Opacity</a>!</li>
                        </ul>
                    </ul>
                </div>
            </section>



=== Evaluation of RESTful service

                <div class="slide" id="evaluation">
                    <hgroup>
                        <h1>Evaluation</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>How "good" is our Order Book service?</li>
                        <ul>
                            <li>Analysis of the service by service characteristics (see MDW for details) and HTTP principles.</li>
                        </ul>

                        <style>
                            .fr:last-child td,
                            .fr > td:first-child {
                                background-color: white;
                                border-bottom: 1px solid whitesmoke;
                            }
                            .fr > td:first-child {
                                border-right: 1px solid LightSteelBlue;
                                background-color: LightSteelBlue;
                                color: white;
                                font-weight: bold;
                            }
                            .fr:last-child td {
                                border-bottom: 1px solid LightSteelBlue;
                            }
                        </style>

                        <table style="width: 890px" class="first-col-header">
                            <thead>
                                <th style="width: 160px">Principle</th><th style="width: 30px">&plus;/&minus;</th><th>Comment</th>
                            </thead>
                            <tbody>
                                <tr class="fr">
                                    <td rowspan="5">Loose Coupling</td>
                                    <td>&nbsp;&plus;</td><td>Uses standard response codes.</td></tr>
                                <tr><td>&nbsp;&plus;</td><td>Uses representation of resources and HTTP Location header to implement the public process.</td></tr>
                                <tr><td>&nbsp;&minus;</td><td>Does not use hypermedia; client needs to construct links for some resources.</td></tr>
                                <tr><td>&nbsp;&plus;</td><td>Properly models resource URIs and resource IDs; they have hierarchical nature; does not use verbs.</td></tr>
                                <tr><td>&nbsp;&plus;</td><td>Respects semantics of HTTP methods and extensively uses them.</td></tr>

                                <tr class="fr">
                                    <td rowspan="2">Reusability</td>
                                    <td>&nbsp;&plus;</td><td>Unforeseen clients will likely use the service as the application state is communicated through HTTP.</td></tr>
                                <tr><td>&nbsp;&minus;</td><td>Only offers one representation format (JSON).</td></tr>


                                <tr class="fr">
                                    <td rowspan="1">Contracting and Discoverability</td>
                                    <td>&nbsp;&minus;</td><td>Does not describe content type nor public process such as by using Internet Media Types.</td></tr>

                                <tr class="fr">
                                    <td rowspan="1">Composability</td>
                                    <td>&nbsp;&plus;</td><td>Does not obstruct composition.</td></tr>

                                <tr class="fr">
                                    <td rowspan="1">Abstraction</td>
                                    <td>&nbsp;&plus;</td><td>Service description can be implemented by various implementation technologies.</td></tr>

                                <tr class="fr">
                                    <td rowspan="1">Encapsulation</td>
                                    <td>&nbsp;&plus;</td><td>Distinguishes interface from implementation, processing logic is not exposed
                                        to clients through the interface.</td></tr>
                            </tbody>
                        </table>
                    </ul>
                </div>




=== Implementing a RESTful service

        <div class="slide outline"></div>
            
        <section>
            <header>Implementing a RESTful Service</header>

            <div class="slide">
                <hgroup>
                    <h1>Service Description</h1>
                </hgroup>
                <ul class="xx-small">
                    <li>Example service: Oder processing</li>
                    <ul class="no-bullet"><li><code>https://github.com/tomvit/w20/tree/master/examples/restful-service</code></li></ul>
                    <pre class="brush: plain; gutter: true; class-name: 'tight'">
                        * the service provides three operations: 'open', 'add', 'close'
                        * operation 'open' opens the order
                            - input: none
                            - output: text informing that the order was opened

                        * operation 'add' adds an item to the order
                            - input: an item name, the syntax is [0-9A-Za-z\-]+
                            - output: text informing that the item was added to the order

                        * operation 'close' closes the order and returns all items in the order
                            - input: none
                            - output: list of all items previously added to the order

                        * the public process is: S0--open--S1, S1--add--S1, S1--close--S0, where
                          S0, S1 are states such that S0 = order is closed, and S1 = order is opened.

                        * protocol is HTTP, RESTful service
                          running at ec2.vitvar.com, tcp/9900
                    </pre>
                    <li>Basic steps to define a RESTful service</li>
                    <ol>
                        <li>identify resources and URIs</li>
                        <li>specify resources' representations</li>
                        <li><b>define service operations</b> (methods and status codes)</li>
                    </ol>
                </ul>
            </div>

            <div class="slide outline"></div>

            <section>
                <header>Basic Implementation</header>

                <div class="slide">
                    <hgroup>
                        <h1>Resources, URIs and Representations</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>There are three resources</li>
                        <ul>
                            <li>Resource <code>/orders</code> is a container of all orders</li>
                            <li>Resource <code>/orders/{order-id}</code> is an order with resource id <code>order-id</code>.</li>
                            <li>Resource <code>/orders/{order-id}/{item-id}</code> is an item that belongs to the order <code>order-id</code>
                            and that has a resource id <code>item-id</code>.</li>
                        </ul>
                        <li>Structure</li>
                        <ul>
                            <li><code>/orders</code></li>
                            <ul>
                                <li>list of all orders</li>
                            </ul>
                            <li><code>/orders/{order-id}</code></li>
                            <ul>
                                <li>status, order id, list of all items in the order</li>
                            </ul>
                            <li><code>/orders/{order-id}/{item-id}</code></li>
                            <ul>
                                <li>item id, name, price</li>
                            </ul>
                        </ul>
                        <li>Resource representations</li>
                        <ul>
                            <li>We define representations in JSON</li>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Open Order</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>To open an order</li>
                        <ul>
                            <li>Insert a new order to <code>/orders</code> using <code>POST</code></li>
                            <li>Set the new order's status to "open"</li>
                            <div class="h-github" cid="50e4378" name="examples/restful-service/order-service.js" lines="45-59"></div>
                            <ul>
                                <li><code>storage.getOrderSeqId()</code> returns the order ID</li>
                                <li><code>storage.orders</code> (line 37) is an array of all orders in a storage</li>
                            </ul>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Add Item to Order</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>To add an item to the order</li>
                        <ul>
                            <li>Insert a new item to the order <code>/orders/{order-id}</code> using <code>POST</code></li>
                        </ul>
                        <div class="h-github" cid="50e4378" name="examples/restful-service/order-service.js" lines="74-94"></div>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Close Order</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>To close an order</li>
                        <ul>
                            <li>Update the status of the order <code>/orders/{order-id}</code> using <code>PUT</code></li>
                        </ul>
                        <div class="h-github" cid="50e4378" name="examples/restful-service/order-service.js" lines="97-116"></div>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Other Operations</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>To get, delete an order and get, delete and update an item</li>
                        <ul>
                            <li>Delete an order <code>/orders/{order-id}</code> using <code>DELETE</code></li>
                            <li>Get an order's item <code>/orders/{order-id}/{item-id}</code> using <code>GET</code></li>
                            <li>Update an order's item <code>/orders/{order-id}/{item-id}</code> using <code>PUT</code></li>
                            <li>Delete an order's item <code>/orders/{order-id}/{item-id}</code> using <code>DELETE</code></li>
                        </ul>
                        <li>Other methods are not allowed</li>
                        <ul>
                            <li>Send <code>405 Not Allowed</code> status with <code>Allow</code> header to indicate which methods
                            are allowed on a resource</li>
                        </ul>
                        <pre class="brush: js">
                            if (method != "GET" && method != "PUT" && method != "POST" && method != "DELETE")
                                return {
                                    status: "405", // method not allowed
                                    headers : { "Allow" : "GET, PUT, POST, DELETE" }
                                };
                        </pre>
                        <li class="task">Task</li>
                        <ul>
                            <li>Implement the remaining methods listed above</li>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Testing</h1>
                    </hgroup>
                    <ul class="xx-small">
                        <li>Test the service using a bash script <code>test.sh</code></li>
                        <div class="h-github" cid="50e4378" name="examples/restful-service/test.sh" config="highlight: [7,16,17,18,21,24]"
                            brush="bash" cid="fef7e41" lines="3-24"></div>
                        <li class="task">Task</li>
                        <ul>
                            <li>Run service and test it using the <code>test.sh</code> script.</li>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>RESTful Public Process</h1>
                    </hgroup>
                    <div class="h-drawing" style="height: 350px" id="1ZZsczsf7O-4HLuf_Flk0Ruttv5buKRmM7afQvgGWK8w"></div>
                    <ul class="x-small">
                        <li>Note</li>
                        <ul>
                            <li>client, service communicate through metadata and representations</li>
                            <li>There is no need for a stateful server</li>
                        </ul>
                    </ul>
                </div>

            </section>

        </section>

        <div class="slide outline"></div>


=== Asynchronous operations in REST

        <div class="slide outline"></div>

        <section>
            <header>Asynchronous Communication</header>

            <div class="slide">
                <hgroup>
                    <h1>Asynchronous Communication</h1>
                </hgroup>
                <ul class="small">
                    <li>Recall asynchronous communication from MDW</a></li>
                    <li>Asynchronous communication in HTTP</li>
                    <ul>
                        <li>Server cannot establish a connection, always clients need to</li>
                        <ul>
                            <li>clients are browsers behind firewalls</li>
                        </ul>
                    </ul>
                </ul>
                <div class="h-drawing" style="height: 300px" id="1cy6MqkN_U_1oRNDJhR8pT_snON_nTU7jga2qbvB4oYU"></div>
            </div>

            <div class="slide">
                <hgroup>
                    <h1>Asynchronous and Polling/Pushing</h1>
                </hgroup>
                <ul class="small">
                    <li>Submit request for processing</li>
                    <ul>
                        <li>Always through HTTP request and <code>202 Accepted</code> response and <code>Location</code> header
                        with a monitor resource</li>
                        <li>Methods: <code>PUT</code>, <code>POST</code>, <code>DELETE</code></li>
                    </ul>
                    <li>Getting the status from the monitor resource</li>
                    <ul>
                        <li><b>polling</b> &ndash; a client periodically checks for changes via <code>GET</code></li>
                        <ul>
                            <li>Most natural solution, not a real-time solution</li>
                        </ul>
                        <li><b>pushing</b> &ndash; a server pushes changes back to the client</li>
                        <ul>
                            <li>Part of real-time Web efforts</li>
                        </ul>
                        <li>More details in <a href="lecture8.html">Lecture 8: Protocols for the Realtime Web</a></li>
                    </ul>
            </div>


        </section>


=== Details of URI/URL Charecteristics


            <div class="slide outline"></div>
            
            <section>
                <header>Good URI/URL Design</header>

                <div class="slide" id="uri-alias-collision">
                    <hgroup>
                        <h1>Capability URL</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>What's capabiliy URL</li>
                        <ul>
                            <li>They are usually valid for a short period of time</li>
                            <li>They are not public, they are private to one person or a group of people</li>
                            <li>Ephemeral resources</li>
                        </ul>
                        <li>Examples</li>
                        <ul>
                            <li>Password resets, Polls, Google calendar's private URLs, ...</li>
                            <li>Access control &ndash; key, session</li>
                        </ul>
                        <li>Design considerations</li>
                        <ul>
                            <li>They should be https resources!</li>
                            <ul>
                                <li>limits exposure, in logs or on the network</li>
                            </ul>
                            <li>They should be revokable by the user/owner</li>
                            <li>They should not be persistent, they should expire</li>
                        </ul>
                        <li>Normal URLs</li>
                        <ul>
                            <li>No URL collision, URI opacity, human readable, independence on a context, persistent URI</li>
                        </ul>
                    </ul>
                </div>

                <div class="slide" id="uri-alias-collision">
                    <hgroup>
                        <h1>URI Aliases and URI Collision</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>URI Alias</li>
                        <ul>
                            <li>More than one URI identifies a single resource</li>
                            <li>This happens, for example</li>
                            <ul>
                                <li>Different views on the same data entity<br/>
                                view 1: <code>/customers/{customer-id}/orders</code><br/>
                                view 2: <code>/orders/{customer-id}</code></li>
                                
                                <li>DNS load balancing:<br/>                                
                                domain name 1: <code>http://api.company.com/orders</code><br/>
                                domain name 2: <code>http://api2.company.com/orders</code></li>
                            </ul>
                        </ul>
                        <li>URI Collision</li>
                        <ul>
                            <li>Two resources have one URI</li>
                            <li>This should not happen, for example</li>
                            <ul>
                                <li>A company uses an authority it does not own<br/>                                
                                company Amazon: <code>http://amazon.com/orders</code><br/>
                                company Knihy.cz: <code>http://amazon.com/orders</code></li>
                                <li>Exception: domain <code>example.org</code></li>
                            </ul>
                        </ul>
                    </ul>
                </div>
                
                <div class="slide">
                    <hgroup>
                        <h1>Representation Reuse</h1>
                    </hgroup>
                    <ul class="small">  
                        <li>Compare this:</li>
                        <ul>
                            <li><code>http://company.com/tomas/orders/?date=111001</code><br/>
                            &rarr; all orders of Tomas till 1st October 2011</li>
                            <li><code>http://company.com/tomas/orders</code></li>
                            <ul>
                                <li>all orders of Tomas till today</li>
                                <li>when retrieved on 1st October 2011,<br/>will be the same as the first resource</li>
                            </ul>
                            <li class="space-before">These are different resources</li>
                            <ul>
                                <li>We say the two resources reused their representations</li>
                                <li>Representation reuse only happens under certain conditions</li>                                
                            </ul>
                        </ul>
                    </ul>
                </div>
    
                <div class="slide" id="uri-opacity">
                    <hgroup>
                        <h1>URI Opacity</h1>
                    </hgroup>
                    <ul class="small">  
                        <li>URI does not describe a resource data format</li>
                        <ul>
                            <li>In general it does not describe any resource metadata</li>
                            <li>Thus we cannot determine a format through URIs</li>
                            <ul>
                                <li>There is no relation between URI and HTTP</li>
                                <li>HTTP media types does not affect URI path component</li>
                            </ul>                            
                        </ul>
                        <li>Example</li>
                        <ul>
                            <li><code>http://company.com/orders.html</code></li>
                            <ul>
                                <li>there is no guarantee that the resource is in <code>text/html</code> format</li>
                            </ul>
                        </ul>
                        <li>However, it sometimes comes handy</li>
                        <ul>
                            <li>Easy to retrieve a data format by tweaking URL (browser)</li>
                            <li>For example, Google API uses query parameter <code>alt</code></li>
                            <li>No need to fiddle with headers and using tools such as <code>curl</code></li>
                        </ul>
                    </ul>
                </div>
                
                <div class="slide">
                    <hgroup>
                        <h1>Human Readable URI</h1>
                    </hgroup>
                    <ul class="small">  
                        <li>URIs are both for machines and users</li>
                        <ul>
                            <li>Users should be able to memorize them</li>
                            <li>URIs should contain pronounceable words, good number of path components, 
                            clear query parameters, etc.</li>
                        </ul>
                        <li>Example</li>
                        <ul>
                            <li>A human readable:<br/>
                            <code>http://company.com/tomas/orders/</code></li>
                            <li>Not really human readable:<br/>
                            <code>http://company.com/?c=gjddjsj224&a=58584&jbd=5553a</code></li>                            
                        </ul>
                        <li>URIs generated by a machine &ndash; capability URLs</li>
                        <ul>
                            <li>URLs that are not meant to be "remembered"</li>
                        </ul>
                    </ul>
                </div>
                                
                <div class="slide">
                    <hgroup>
                        <h1>Independence on a Context</h1>
                    </hgroup>
                    <ul class="x-small">
                        <li>URIs are independent on a user context</li>
                        <ul>
                            <li>It should be possible to share URIs among users</li>
                            <ul>
                                <li>For example, you send an URI over an IM system</li>
                                <li>Others should be able to retrieve the same resource as you<br/>
                                (if they have rights)</li>
                            </ul>
                        </ul>
                        <li>BUT:</li>
                        <ul>
                            <li>URL may include an access or a session information &ndash; capability URL</li>
                        </ul>
                        <li>Example</li>
                        <ul>
                            <li>Capability URL: <code>http://company.com/orders/?session=5582&user=bob</code></li>
                            <ul>
                                <li>This cannot be reused by other user than Bob</li>
                            </ul>
                            <li>No context: <code>http://company.com/orders/</code></li>
                            <ul>
                                <li>a user needs to be logged in to access the resource</li>
                                <li>HTTP authorization header identifies the user</li>
                            </ul>
                        </ul>
                    </ul>
                </div>

                <div class="slide">
                    <hgroup>
                        <h1>Resource Versions</h1>
                    </hgroup>
                    <ul>
                        <li>Resources evolve over time</li>
                        <li>Need to deal with various versions</li>
                        <ul>
                            <li>need to support old clients on old versions</li>
                            <li>allow new clients to use new versions</li>
                        </ul>
                        <li>Versioning at URI level</li>
                        <ul>
                            <li>one path element to identify a version<br/>
                            <code>http://company.com/v1/tomas/orders</code>
                            <li>should be part of the path component not a query</li>
                            <li>API version</li>
                            <ul>
                                <li>version applies to a set of resources</li>
                            </ul>
                        </ul>
                        <li>Versioning at resource meta-data level</li>
                        <ul>
                            <li>cf. <a href="#/resource-versions">Version control via content negotiation</a></li>
                        </ul>
                    </ul>
                </div> 
    
                <div class="slide">
                    <hgroup>
                        <h1>Persistent URI</h1>
                    </hgroup>
                    <ul>
                        <li>Good URLs should not change</li>
                        <ul>
                            <li>They should be indefinitely assigned to a resource</li>
                            <li>even if the resource does not exist anymore</li>
                        </ul>
                        <li>HTTP and URI persistence</li>
                        <ul>
                            <li>new URI associated with the resource</li>
                            <li>HTTP redirection through <code>3xx</code> response codes</li>
                            <ul>
                                <li>See response codes</li>
                            </ul>
                        </ul>
                        <li>Capability URLs are not usually persisent</li>
                    </ul>
                </div>        
            </section>

